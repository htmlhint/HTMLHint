#!/usr/bin/env node

var program = require('commander');
var fs = require('fs');
var path = require('path');
var stripJsonComments = require('strip-json-comments');
var async = require('async');
var glob = require("glob");
var parseGlob = require('parse-glob');

var HTMLHint  = require("../index").HTMLHint;
var pkg = require('../package.json');

require('colors');

function map(val) {
    var objMap = {};
    val.split(',').forEach(function(item){
        var arrItem = item.split(/\s*=\s*/);
        objMap[arrItem[0]] = arrItem[1]?arrItem[1]:true;
    });
    return objMap;
}

program.on('--help', function(){
    console.log('  Examples:');
    console.log('');
    console.log('    htmlhint');
    console.log('    htmlhint www');
    console.log('    htmlhint www/test.html');
    console.log('    htmlhint www/**/*.xhtml');
    console.log('    htmlhint --list');
    console.log('    htmlhint --rules tag-pair,id-class-value=underline test.html');
    console.log('    htmlhint --rulesPath ./rules test.html');
    console.log('    htmlhint --config .htmlhintrc test.html');
    console.log('    htmlhint --ignore **/build/**,**/test/**');
    console.log('');
});

program
    .version(pkg.version)
    .usage('<file|folder|pattern ...> [options]')
    .option('-l, --list', 'show all of the rules available.')
    .option('-c, --config <file>', 'custom configuration file.')
    .option('-r, --rules <ruleid, ruleid=value ...>', 'set all of the rules available.', map)
    .option('--rulesPath <folder>', 'load custom rules from folder')
    .option('-j, --json', 'output messages as raw JSON')
    .option('-i, --ignore <pattern, pattern ...>', 'Add pattern to exclude matches')
    .parse(process.argv);

if(program.list){
    listRules();
    process.exit(0);
}

var arrTargets = program.args;
if(arrTargets.length === 0){
    arrTargets.push('./');
}

program.rulesPath = path.resolve(program.rulesPath);

if (!(program.rulesPath &&
    fs.existsSync(program.rulesPath) &&
    fs.lstatSync(program.rulesPath).isDirectory())) {
    console.log('Bad custom folder for rule: '.red,program.rulesPath);
    process.exit(0);
}

hintTargets(arrTargets, {
    ruleset: program.rules,
	rulesPath: program.rulesPath,
    json: program.json,
    ignore: program.ignore
});

// list all rules
function listRules(){
    var rules = HTMLHint.rules;
    var rule;
    console.log('     All rules:');
    console.log(' ==================================================');
    for (var id in rules){
        rule = rules[id];
        console.log('     %s : %s', rule.id.bold, rule.description);
    }
}

function hintTargets(arrTargets, options){
    var allFileCount = 0;
    var allHintFileCount = 0;
    var allHintCount = 0;
    var startTime = new Date().getTime();

    var rulesPath = path.resolve(options.rulesPath);

    // json mode
    var json = options.json;
    var arrJson = [];
    if(!json){
        console.log('');
    }
    if (rulesPath) {
        fs.readdir(rulesPath, function(err, rules) {
            rules.forEach(function(ruleName) {
                var rulePath = path.join(rulesPath,ruleName);
                var rule = require(rulePath);

                rule(HTMLHint);
            });
        });
    }


    var arrTasks = [];
    arrTargets.forEach(function(target){
        arrTasks.push(function(next){
            hintAllFiles(target, options, function(result){
                allFileCount += result.targetFileCount;
                allHintFileCount += result.targetHintFileCount;
                allHintCount += result.targetHintCount;
                arrJson = arrJson.concat(result.arrJson);
                next();
            });
        });
    });
    async.series(arrTasks, function(){
        if(json){
            console.log(JSON.stringify(arrJson));
        }
        else{
            var spendTime = new Date().getTime() - startTime;
            if(allHintCount > 0){
                console.log('Scan %d files, found %d errors in %d files (%d ms)'.red, allFileCount, allHintCount, allHintFileCount, spendTime);
            }
            else{
                console.log('Scan %d files, without errors (%d ms).'.green, allFileCount, spendTime);
            }
        }
        process.exit(allHintCount > 0 ? 1: 0);
    });
}

// hint all files
function hintAllFiles(target, options, onFinised){
    var globInfo = getGlobInfo(target);
    globInfo.ignore = options.ignore;

    // hint count
    var targetFileCount = 0;
    var targetHintFileCount = 0;
    var targetHintCount = 0;

    // json mode
    var json = options.json;
    var arrJson = [];

    // init ruleset
    var ruleset = options.ruleset;
    if(ruleset === undefined){
        ruleset = getConfig(program.config, globInfo.base, json);
    }

    // hint queue
    var hintQueue = async.queue(function (filepath, next) {
        var messages = hintFile(filepath, ruleset);
        var hintCount = messages.length;
        if(hintCount > 0){
            if(json){
                arrJson.push({'file': filepath, 'messages': messages});
            }
            else{
                console.log('   '+filepath.white);
                messages.forEach(function(hint){
                    var leftWindow = 40;
                    var rightWindow = leftWindow + 20;
                    var evidence = hint.evidence;
                    var line = hint.line;
                    var col = hint.col;
                    var evidenceCount = evidence.length;
                    var leftCol = col > leftWindow + 1 ? col - leftWindow : 1;
                    var rightCol = evidence.length > col + rightWindow ? col + rightWindow : evidenceCount;
                    if(col < leftWindow + 1){
                        rightCol += leftWindow - col + 1;
                    }
                    evidence = evidence.replace(/\t/g, ' ').substring(leftCol - 1, rightCol);
                    // add ...
                    if(leftCol > 1){
                        evidence = '...' + evidence;
                        leftCol -= 3;
                    }
                    if(rightCol < evidenceCount){
                        evidence += '...';
                    }
                    // show evidence
                    console.log('      L%d |%s'.white, line, evidence.gray);
                    // show pointer & message
                    var pointCol = col - leftCol;
                    // add double byte character
                    var match = evidence.substring(0, pointCol).match(/[^\u0000-\u00ff]/g);
                    if(match !== null){
                        pointCol += match.length;
                    }
                    console.log('      %s^ %s'.white, repeatStr(String(line).length + 3 + pointCol), (hint.message + ' (' + hint.rule.id+')')[hint.type === 'error'?'red':'yellow']);
                });
                console.log('');
            }
            targetHintFileCount ++;
            targetHintCount += hintCount;
        }
        targetFileCount ++;
        setImmediate(next);
    }, 10);
    // start hint
    var isWalkDone = false;
    var isHintDone = true;
    walkPath(globInfo, function(filepath){
        isHintDone = false;
        hintQueue.push(filepath);
    }, function(){
        isWalkDone = true;
        checkAllHinted();
    });
    hintQueue.drain = function() {
        isHintDone = true;
        checkAllHinted();
    };
    function checkAllHinted(){
        if(isWalkDone && isHintDone){
            onFinised({
                targetFileCount: targetFileCount,
                targetHintFileCount: targetHintFileCount,
                targetHintCount: targetHintCount,
                arrJson: arrJson
            });
        }
    }
}

// split target to base & glob
function getGlobInfo(target){
    // fix windows sep
    target = target.replace(/\\/g, '/');
    var globInfo = parseGlob(target);
    var base = globInfo.base;
    base += /\/$/.test(base) ? '' : '/';
    var pattern = globInfo.glob;
    var globPath = globInfo.path;
    var defaultGlob = '*.{htm,html}';
    if(globInfo.is.glob === true){
        // no basename
        if(globPath.basename === ''){
            pattern += defaultGlob;
        }
    }
    else{
        // no basename
        if(globPath.basename === ''){
            pattern += '**/' + defaultGlob;
        }
        // detect directory
        else if(fs.existsSync(target) && fs.statSync(target).isDirectory()){
            base += globPath.basename + '/';
            pattern = '**/' + defaultGlob;
        }
    }
    return {
        base: base,
        pattern: pattern
    };
}

// search and load config
function getConfig(configFile, base, json){
    if(configFile === undefined && fs.existsSync(base)){
        // find default config file in parent directory
        if(fs.statSync(base).isDirectory() === false){
            base = path.dirname(base);
        }
        while(base){
            var tmpConfigFile = path.resolve(base+path.sep, '.htmlhintrc');
            if(fs.existsSync(tmpConfigFile)){
                configFile = tmpConfigFile;
                break;
            }
            base = base.substring(0,base.lastIndexOf(path.sep));
        }
    }

    if(fs.existsSync(configFile)){
        var config = fs.readFileSync(configFile, 'utf-8'),
            ruleset;
        try{
            ruleset = JSON.parse(stripJsonComments(config));
            if(!json){
                console.log('   Config loaded: %s', configFile.cyan);
                console.log('');
            }
        }
        catch(e){}
        return ruleset;
    }
}

// walk path
function walkPath(globInfo, callback, onFinish) {
    var base = globInfo.base;
    var pattern = globInfo.pattern;
    var ignore = globInfo.ignore;
    var arrIgnores = ['**/node_modules/**'];
    if(ignore){
        ignore.split(',').forEach(function(pattern){
            arrIgnores.push(pattern);
        });
    }
    var walk = glob(pattern, {
        'cwd': base,
        'dot': false,
        'ignore': arrIgnores,
        'nodir': true,
        'strict': false,
        'silent': true
    },function() {
        onFinish();
    });
    walk.on('match', function(file){
        base = base.replace(/^.\//, '');
        callback(base + file);
    });
}

// hint file
function hintFile(filepath, ruleset){
    var content = fs.readFileSync(filepath, 'utf-8');
    return HTMLHint.verify(content, ruleset);
}

// repeat string
function repeatStr(n, str){
    return new Array(n + 1).join(str || ' ');
}
